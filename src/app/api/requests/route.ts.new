import { NextRequest, NextResponse } from 'next/server'
import pool from '@/lib/db'
import { RowDataPacket, ResultSetHeader } from 'mysql2'
import { getUserFromRequest } from '@/lib/auth'

// GET /api/requests - Get user's requests
export async function GET(request: NextRequest) {
  try {
    const user = await getUserFromRequest(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    if (user.role === 'client') {
      // Get client's own requests
      const [rows] = await pool.query<RowDataPacket[]>(
        `SELECT * FROM service_requests WHERE client_id = ? ORDER BY created_at DESC`,
        [user.id]
      )
      return NextResponse.json(rows)
    }

    return NextResponse.json({ error: 'Access denied' }, { status: 403 })
  } catch (error) {
    console.error('Error fetching requests:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// POST /api/requests - Create new service request
export async function POST(request: NextRequest) {
  try {
    const user = await getUserFromRequest(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    if (user.role !== 'client') {
      return NextResponse.json(
        { error: 'Only clients can create service requests' },
        { status: 403 }
      )
    }

    const { title, description, category, location, budget, urgency } = await request.json()

    if (!title || !description || !category || !location || !urgency) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })
    }

    const [result] = await pool.query<ResultSetHeader>(
      `INSERT INTO service_requests (title, description, category, location, budget, urgency, client_id, status)
       VALUES (?, ?, ?, ?, ?, ?, ?, 'open')`,
      [title, description, category, location, budget, urgency, user.id]
    )

    return NextResponse.json({
      success: true,
      id: result.insertId,
      message: 'Service request created successfully'
    }, { status: 201 })
  } catch (error) {
    console.error('Error creating service request:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
